/**
 * Created by wct on 8/23/14.
 */
var EventEmitter = require('events').EventEmitter;
var util = require('util');

var SerialPortModule = require("serialport"),
    SerialPort = SerialPortModule.SerialPort;

function WCTTG() {
    // Squirrel away a ref to 'this' for use in callbacks.
    var self = this;
    var prop;
    //predefine
    var serialPort = null;
    this.serialPort = serialPort;

    var readBuffer = "";


    this._baseSerialPortOptions = {
        baudRate: 115200,
        flowcontrol: ['XON', 'XOFF'],
        parser: SerialPortModule.parsers.readline("\n")
    };
    // big list of properties
    Object.defineProperty(this, "motor_1_axis", {//Motor 1 mapping to axis
        get: function () {
            self.write('{"1ma":""}');
        },
        set: function (val) {
            self.write('{"1ma":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_1_step_angle", {//Motor 1 step angle
        get: function () {
            self.write('{"1sa":""}');
        },
        set: function (val) {
            self.write('{"1sa":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_1_travel_per_rev", {//Motor 1 travel per revolution
        get: function () {
            self.write('{"1tr":""}');
        },
        set: function (val) {
            self.write('{"1tr":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_1_microsteps", {//Motor 1 microsteps
        get: function () {
            self.write('{"1mi":""}');
        },
        set: function (val) {
            self.write('{"1mi":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_1_polarity", {//Motor 1 polarity
        get: function () {
            self.write('{"1po":""}');
        },
        set: function (val) {
            self.write('{"1po":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_1_power_management_mode", {//Motor 1 power management mode
        get: function () {
            self.write('{"1pm":""}');
        },
        set: function (val) {
            self.write('{"1pm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_1_power_level", {//Motor 1 power level (ARM only)
        get: function () {
            self.write('{"1pl":""}');
        },
        set: function (val) {
            self.write('{"1pl":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_2_axis", {//Motor 2 mapping to axis
        get: function () {
            self.write('{"2ma":""}');
        },
        set: function (val) {
            self.write('{"2ma":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_2_step_angle", {//Motor 2 step angle
        get: function () {
            self.write('{"2sa":""}');
        },
        set: function (val) {
            self.write('{"2sa":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_2_travel_per_rev", {//Motor 2 travel per revolution
        get: function () {
            self.write('{"2tr":""}');
        },
        set: function (val) {
            self.write('{"2tr":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_2_microsteps", {//Motor 2 microsteps
        get: function () {
            self.write('{"2mi":""}');
        },
        set: function (val) {
            self.write('{"2mi":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_2_polarity", {//Motor 2 polarity
        get: function () {
            self.write('{"2po":""}');
        },
        set: function (val) {
            self.write('{"2po":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_2_power_management_mode", {//Motor 2 power management mode
        get: function () {
            self.write('{"2pm":""}');
        },
        set: function (val) {
            self.write('{"2pm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_2_power_level", {//Motor 2 power level (ARM only)
        get: function () {
            self.write('{"2pl":""}');
        },
        set: function (val) {
            self.write('{"2pl":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_3_axis", {//Motor 3 mapping to axis
        get: function () {
            self.write('{"3ma":""}');
        },
        set: function (val) {
            self.write('{"3ma":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_3_step_angle", {//Motor 3 step angle
        get: function () {
            self.write('{"3sa":""}');
        },
        set: function (val) {
            self.write('{"3sa":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_3_travel_per_axis", {//Motor 3 travel per revolution
        get: function () {
            self.write('{"3tr":""}');
        },
        set: function (val) {
            self.write('{"3tr":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_3_microsteps", {//Motor 3 microsteps
        get: function () {
            self.write('{"3mi":""}');
        },
        set: function (val) {
            self.write('{"3mi":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_3_polarity", {//Motor 3 polarity
        get: function () {
            self.write('{"3po":""}');
        },
        set: function (val) {
            self.write('{"3po":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_3_power_management_mode", {//Motor 3 power management mode
        get: function () {
            self.write('{"3pm":""}');
        },
        set: function (val) {
            self.write('{"3pm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_3_power_level", {//Motor 3 power level (ARM only)
        get: function () {
            self.write('{"3pl":""}');
        },
        set: function (val) {
            self.write('{"3pl":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_4_axis", {//Motor 4 mapping to axis
        get: function () {
            self.write('{"4ma":""}');
        },
        set: function (val) {
            self.write('{"4ma":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_4_step_angle", {//Motor 4 step angle
        get: function () {
            self.write('{"4sa":""}');
        },
        set: function (val) {
            self.write('{"4sa":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_4_travel_per_rev", {//Motor 4 travel per revolution
        get: function () {
            self.write('{"4tr":""}');
        },
        set: function (val) {
            self.write('{"4tr":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_4_microsteps", {//Motor 4 microsteps
        get: function () {
            self.write('{"4mi":""}');
        },
        set: function (val) {
            self.write('{"4mi":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_4_polarity", {//Motor 4 polarity
        get: function () {
            self.write('{"4po":""}');
        },
        set: function (val) {
            self.write('{"4po":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_4_power_management_mode", {//Motor 4 power management mode
        get: function () {
            self.write('{"4pm":""}');
        },
        set: function (val) {
            self.write('{"4pm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_4_power_level", {//Motor 4 power level (ARM only)
        get: function () {
            self.write('{"4pl":""}');
        },
        set: function (val) {
            self.write('{"4pl":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_a_radius", {//Radius setting
        get: function () {
            self.write('{"ara":""}');
        },
        set: function (val) {
            self.write('{"ara":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_b_radius", {//Radius setting
        get: function () {
            self.write('{"bra":""}');
        },
        set: function (val) {
            self.write('{"bra":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_c_radius", {//Radius setting
        get: function () {
            self.write('{"cra":""}');
        },
        set: function (val) {
            self.write('{"cra":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_mode", {//X Axis mode
        get: function () {
            self.write('{"xam":""}');
        },
        set: function (val) {
            self.write('{"xam":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_velocity_max", {//X Velocity maximum
        get: function () {
            self.write('{"xvm":""}');
        },
        set: function (val) {
            self.write('{"xvm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_feed_rate_max", {//X Feed rate maximum
        get: function () {
            self.write('{"xfr":""}');
        },
        set: function (val) {
            self.write('{"xfr":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_travel_min", {//X Travel minimum
        get: function () {
            self.write('{"xtn":""}');
        },
        set: function (val) {
            self.write('{"xtn":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_travel_max", {//X Travel maximum
        get: function () {
            self.write('{"xtm":""}');
        },
        set: function (val) {
            self.write('{"xtm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_jerk_max", {//X Jerk maximum
        get: function () {
            self.write('{"xjm":""}');
        },
        set: function (val) {
            self.write('{"xjm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_homing_jerk", {//X Jerk Homing
        get: function () {
            self.write('{"xjh":""}');
        },
        set: function (val) {
            self.write('{"xjh":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_junction_deviation", {//X Junction deviation
        get: function () {
            self.write('{"xjd":""}');
        },
        set: function (val) {
            self.write('{"xjd":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_min_switch_mode", {//X Minimum switch mode
        get: function () {
            self.write('{"xsn":""}');
        },
        set: function (val) {
            self.write('{"xsn":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_max_switch_mode", {//X Maximum switch mode
        get: function () {
            self.write('{"xsx":""}');
        },
        set: function (val) {
            self.write('{"xsx":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_axis_mode", {//Y Axis mode
        get: function () {
            self.write('{"yam":""}');
        },
        set: function (val) {
            self.write('{"yam":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_velocity_max", {//Y Velocity maximum
        get: function () {
            self.write('{"yvm":""}');
        },
        set: function (val) {
            self.write('{"yvm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_feed_rate_max", {//Y Feed rate maximum
        get: function () {
            self.write('{"yfr":""}');
        },
        set: function (val) {
            self.write('{"yfr":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_travel_min", {//Y Travel minimum
        get: function () {
            self.write('{"ytn":""}');
        },
        set: function (val) {
            self.write('{"ytn":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_travel_max", {//Y Travel maximum
        get: function () {
            self.write('{"ytm":""}');
        },
        set: function (val) {
            self.write('{"ytm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_jerk_max", {//Y Jerk maximum
        get: function () {
            self.write('{"yjm":""}');
        },
        set: function (val) {
            self.write('{"yjm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_homing_jerk", {//Y Jerk Homing
        get: function () {
            self.write('{"yjh":""}');
        },
        set: function (val) {
            self.write('{"yjh":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_junction_deviation", {//Y Junction deviation
        get: function () {
            self.write('{"yjd":""}');
        },
        set: function (val) {
            self.write('{"yjd":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_min_switch_mode", {//Y Minimum switch mode
        get: function () {
            self.write('{"ysn":""}');
        },
        set: function (val) {
            self.write('{"ysn":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_max_switch_mode", {//Y Maximum switch mode
        get: function () {
            self.write('{"ysx":""}');
        },
        set: function (val) {
            self.write('{"ysx":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_axis_mode", {//Z Axis mode
        get: function () {
            self.write('{"zam":""}');
        },
        set: function (val) {
            self.write('{"zam":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_velocity_max", {//Z Velocity maximum
        get: function () {
            self.write('{"zvm":""}');
        },
        set: function (val) {
            self.write('{"zvm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_feed_rate_max", {//Z Feed rate maximum
        get: function () {
            self.write('{"zfr":""}');
        },
        set: function (val) {
            self.write('{"zfr":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_travel_min", {//Z Travel minimum
        get: function () {
            self.write('{"ztn":""}');
        },
        set: function (val) {
            self.write('{"ztn":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_travel_max", {//Z Travel maximum
        get: function () {
            self.write('{"ztm":""}');
        },
        set: function (val) {
            self.write('{"ztm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_jerk_max", {//Z Jerk maximum
        get: function () {
            self.write('{"zjm":""}');
        },
        set: function (val) {
            self.write('{"zjm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_homing_jerk", {//Z Jerk Homing
        get: function () {
            self.write('{"zjh":""}');
        },
        set: function (val) {
            self.write('{"zjh":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_junction_deviation", {//Z Junction deviation
        get: function () {
            self.write('{"zjd":""}');
        },
        set: function (val) {
            self.write('{"zjd":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_min_switch_mode", {//Z Minimum switch mode
        get: function () {
            self.write('{"zsn":""}');
        },
        set: function (val) {
            self.write('{"zsn":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z__max_switch_mode", {//Z Maximum switch mode
        get: function () {
            self.write('{"zsx":""}');
        },
        set: function (val) {
            self.write('{"zsx":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "pwm_1_frequency", {//Frequency
        get: function () {
            self.write('{"p1frq":""}');
        },
        set: function (val) {
            self.write('{"p1frq":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "pwm_1_cw_speed_low", {//Clockwise speed low
        get: function () {
            self.write('{"p1csl":""}');
        },
        set: function (val) {
            self.write('{"p1csl":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "pwm_1_cw_speed_high", {//Clockwise speed high
        get: function () {
            self.write('{"p1csh":""}');
        },
        set: function (val) {
            self.write('{"p1csh":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "pwm_1_cw_phase_low", {//Clockwise phase low
        get: function () {
            self.write('{"p1cpl":""}');
        },
        set: function (val) {
            self.write('{"p1cpl":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "pwm_1_cw_phase_high", {//Clockwise phase high
        get: function () {
            self.write('{"p1cph":""}');
        },
        set: function (val) {
            self.write('{"p1cph":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "pwm_1_ccw_speed_low", {//Counter clockwise speed low
        get: function () {
            self.write('{"p1wsl":""}');
        },
        set: function (val) {
            self.write('{"p1wsl":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "pwm_1_ccw_speed_high", {//Counter clockwise speed high
        get: function () {
            self.write('{"p1wsh":""}');
        },
        set: function (val) {
            self.write('{"p1wsh":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "pwm_1_ccw_phase_low", {//Counter clockwise phase low
        get: function () {
            self.write('{"p1wpl":""}');
        },
        set: function (val) {
            self.write('{"p1wpl":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "pwm_1_ccw_phase_high", {//Counter clockwise phase high
        get: function () {
            self.write('{"p1wph":""}');
        },
        set: function (val) {
            self.write('{"p1wph":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "pwm_1_phase_off", {//Phase off
        get: function () {
            self.write('{"p1pof":""}');
        },
        set: function (val) {
            self.write('{"p1pof":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "firmware_build", {//Firmware build
        get: function () {
            self.write('{"fb":""}');
        },
        set: function (val) {
            self.write('{"fb":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "firmware_version", {//Firmware version
        get: function () {
            self.write('{"fv":""}');
        },
        set: function (val) {
            self.write('{"fv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "hardware_platform", {//Hardware platform
        get: function () {
            self.write('{"hp":""}');
        },
        set: function (val) {
            self.write('{"hp":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "hardware_version", {//Hardware version
        get: function () {
            self.write('{"hv":""}');
        },
        set: function (val) {
            self.write('{"hv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "id", {//Unique ID
        get: function () {
            self.write('{"id":""}');
        },
        set: function (val) {
            self.write('{"id":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "junction_acceleration", {//Junction acceleration
        get: function () {
            self.write('{"ja":""}');
        },
        set: function (val) {
            self.write('{"ja":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "chordal_tolerance", {//Chordal tolerance
        get: function () {
            self.write('{"ct":""}');
        },
        set: function (val) {
            self.write('{"ct":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "motor_disable_timeout", {//Motor disable timeout
        get: function () {
            self.write('{"mt":""}');
        },
        set: function (val) {
            self.write('{"mt":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "json_enabled", {//Enable JSON mode 0=text mode, 1=JSON mode
        get: function () {
            self.write('{"ej":""}');
        },
        set: function (val) {
            self.write('{"ej":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "json_verbosity", {//JSON verbosity 0=silent ... 5=verbose (see details)
        get: function () {
            self.write('{"jv":""}');
        },
        set: function (val) {
            self.write('{"jv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "text_verbosity", {//Text mode verbosity 0=silent, 1=verbose
        get: function () {
            self.write('{"tv":""}');
        },
        set: function (val) {
            self.write('{"tv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "queue_report_verbosity", {//Queue report verbosity 0=off, 1=filtered, 2=verbose
        get: function () {
            self.write('{"qv":""}');
        },
        set: function (val) {
            self.write('{"qv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "status_report_verbosity", {//Status report verbosity 0=off, 1=filtered, 2=verbose
        get: function () {
            self.write('{"sv":""}');
        },
        set: function (val) {
            self.write('{"sv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "status_report_interval", {//Status report interval in milliseconds (50 ms minimum interval)
        get: function () {
            self.write('{"si":""}');
        },
        set: function (val) {
            self.write('{"si":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "enable_cr_on_tx", {//Enable CR on TX 0=send LF line termination on TX, 1= send both LF and CR termination
        get: function () {
            self.write('{"ec":""}');
        },
        set: function (val) {
            self.write('{"ec":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "echo_enabled", {//Enable character echo 0=off, 1=enabled
        get: function () {
            self.write('{"ee":""}');
        },
        set: function (val) {
            self.write('{"ee":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "flow_control_enabled", {//Enable flow control 0=off, 1=XON/XOFF enabled, 2=RTS/CTS enabled
        get: function () {
            self.write('{"ex":""}');
        },
        set: function (val) {
            self.write('{"ex":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "baud_rate", {//Baud rate 1=9600, 2=19200, 3=38400, 4=57600, 5=115200, 6=230400 -- 115200 is default
        get: function () {
            self.write('{"baud":""}');
        },
        set: function (val) {
            self.write('{"baud":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "default_plane_selection", {//Default plane selection 0=XY plane (G17), 1=XZ plane (G18), 2=YZ plane (G19)
        get: function () {
            self.write('{"gpl":""}');
        },
        set: function (val) {
            self.write('{"gpl":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "mm_enabled", {//Default units mode 0=inches mode (G20), 1=mm mode (G21)
        get: function () {
            self.write('{"gun":""}');
        },
        set: function (val) {
            self.write('{"gun":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "default_coord_system", {//Default coordinate system 1=G54, 2=G55, 3=G56, 4=G57, 5=G58, 6=G59
        get: function () {
            self.write('{"gco":""}');
        },
        set: function (val) {
            self.write('{"gco":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "default_path_control_mode", {//Default path control mode 0=Exact path mode (G61), 1=Exact stop mode (G61.1), 2=Continuous mode (G64)
        get: function () {
            self.write('{"gpa":""}');
        },
        set: function (val) {
            self.write('{"gpa":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "incremental_enabled", {//Default distance mode 0=Absolute mode (G90), 1=Incremental mode (G91)
        get: function () {
            self.write('{"gdi":""}');
        },
        set: function (val) {
            self.write('{"gdi":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "status_report", {//Request status report SR also sets status report format in JSON mode
        get: function () {
            self.write('{"sr":""}');
        },
        set: function (val) {
            self.write('{"sr":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "queue_report", {// Request queue report
        get: function () {
            self.write('{"qr ":""}');
        },
        set: function (val) {
            self.write('{"qr ":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "queue_flush", {//Flush planner queue Used with '!' feedhold for jogging, probes and other sequences. Usage: {"qf":1}
        get: function () {
            self.write('{"qf":""}');
        },
        set: function (val) {
            self.write('{"qf":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "disable_motors", {//Disable motors Unpower all motors
        get: function () {
            self.write('{"md":""}');
        },
        set: function (val) {
            self.write('{"md":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "energize_motors", {//Energize motors Energize all motors with power management mode set to 0 (e.g. 1pm=0)
        get: function () {
            self.write('{"me":""}');
        },
        set: function (val) {
            self.write('{"me":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "self_test", {//Invoke self tests test=n for test number; test returns help screen in text mode
        get: function () {
            self.write('{"test":""}');
        },
        set: function (val) {
            self.write('{"test":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "factory_defaults", {//Reset to factory defaults defa=1 to reset
        get: function () {
            self.write('{"defa":""}');
        },
        set: function (val) {
            self.write('{"defa":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "bootloader_enabled", {//Enter boot loader boot=1 enters boot loader
        get: function () {
            self.write('{"boot":""}');
        },
        set: function (val) {
            self.write('{"boot":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "help", {//Show help screen Show system help screen; h also works
        get: function () {
            self.write('{"help":""}');
        },
        set: function (val) {
            self.write('{"help":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "home", {//Homing state
        get: function () {
            self.write('{"home":""}');
        },
        set: function (val) {
            self.write('{"home":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "switch_type_nc_enabled", {//Switch Type sets the type of switch used by the entire machine - 0=NO, 1=NC.
        get: function () {
            self.write('{"st":""}');
        },
        set: function (val) {
            self.write('{"st":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_a_min_switch_mode", {//A Minimum Switch Mode 0=disabled
        get: function () {
            self.write('{"asn":""}');
        },
        set: function (val) {
            self.write('{"asn":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_a_max_switch_mode", {//A Maximum Switch Mode 0=disabled
        get: function () {
            self.write('{"asx":""}');
        },
        set: function (val) {
            self.write('{"asx":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_homing_velocity", {//X Axis Homing Search Velocity Velocity for initially finding the homing switch
        get: function () {
            self.write('{"xsv":""}');
        },
        set: function (val) {
            self.write('{"xsv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_homing_latch_velocity", {//X Axis Homing Latch Velocity Velocity for latching phase
        get: function () {
            self.write('{"xlv":""}');
        },
        set: function (val) {
            self.write('{"xlv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_homing_latch_backoff", {//X Axis Homing Latch Backoff. Distance to back off switch during latch and for clears
        get: function () {
            self.write('{"xlb":""}');
        },
        set: function (val) {
            self.write('{"xlb":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_x_homing_zero_backoff", {//X Axis Homing Zero Backoff. Distance to back off switch before setting machine coordinate system zero
        get: function () {
            self.write('{"xzb":""}');
        },
        set: function (val) {
            self.write('{"xzb":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_homing_velocity", {//Y Axis Homing Search Velocity Velocity for initially finding the homing switch
        get: function () {
            self.write('{"ysv":""}');
        },
        set: function (val) {
            self.write('{"ysv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_homing_latch_velocity", {//Y Axis Homing Latch Velocity Velocity for latching phase
        get: function () {
            self.write('{"ylv":""}');
        },
        set: function (val) {
            self.write('{"ylv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_homing_latch_backoff", {//Y Axis Homing Latch Backoff. Distance to back off switch during latch and for clears
        get: function () {
            self.write('{"ylb":""}');
        },
        set: function (val) {
            self.write('{"ylb":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_y_homing_zero_backoff", {//Y Axis Homing Zero Backoff. Distance to back off switch before setting machine coordinate system zero
        get: function () {
            self.write('{"yzb":""}');
        },
        set: function (val) {
            self.write('{"yzb":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_homing_velocity", {//Z Axis Homing Search Velocity Velocity for initially finding the homing switch
        get: function () {
            self.write('{"zsv":""}');
        },
        set: function (val) {
            self.write('{"zsv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_homing_homing_latch_velocity", {//Z Axis Homing Latch Velocity Velocity for latching phase
        get: function () {
            self.write('{"zlv":""}');
        },
        set: function (val) {
            self.write('{"zlv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_homing_latch_backoff", {//Z Axis Homing Latch Backoff. Distance to back off switch during latch and for clears
        get: function () {
            self.write('{"zlb":""}');
        },
        set: function (val) {
            self.write('{"zlb":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_z_homing_zero_backoff", {//Z Axis Homing Zero Backoff. Distance to back off switch before setting machine coordinate system zero
        get: function () {
            self.write('{"zzb":""}');
        },
        set: function (val) {
            self.write('{"zzb":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_a_travel_max", {//A Axis Travel Maximum This axis parameter is used to limit travel during the search phase
        get: function () {
            self.write('{"atm":""}');
        },
        set: function (val) {
            self.write('{"atm":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_a_homing_jerk", {//A Axis Homing Jerk Set this to stop quickly on switches. May need to be larger than the JM
        get: function () {
            self.write('{"ajh":""}');
        },
        set: function (val) {
            self.write('{"ajh":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_a_homing_velocity", {//A Axis Homing Search Velocity Velocity for initially finding the homing switch
        get: function () {
            self.write('{"asv":""}');
        },
        set: function (val) {
            self.write('{"asv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_a_homing_latch_velocity", {//A Axis Homing Latch Velocity Velocity for latching phase
        get: function () {
            self.write('{"alv":""}');
        },
        set: function (val) {
            self.write('{"alv":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_a_homing_latch_backoff", {//A Axis Homing Latch Backoff. Distance to back off switch during latch and for clears
        get: function () {
            self.write('{"alb":""}');
        },
        set: function (val) {
            self.write('{"alb":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });
    Object.defineProperty(this, "axis_a_homing_zero_backoff", {//A Axis Homing Zero Backoff. Distance to back off switch before setting machine coordinate system zero
        get: function () {
            self.write('{"azb":""}');
        },
        set: function (val) {
            self.write('{"azb":' + val + '}');
        },
        configurable: true,
        enumerable: true
    });

}

util.inherits(WCTTG, EventEmitter);

WCTTG.prototype.open = function (path, options) {
    var self = this;
    if (self.serialPort !== null) {
        throw new Error("Unable to open WCTTG at path '" + path + "' -- WCTTG already open.");
    }
    options = options || {};
    for (key in self._baseSerialPortOptions) {
        options[key] = options[key] || self._baseSerialPortOptions[key];
    }

    console.log(util.inspect(options));
    self.serialPort = new SerialPort(path, options);
    self.serialPort.on("open", function () {
        self.serialPort.on('data', function (data) {
            self.emit("data", data);
        });
        self.flow_control_enabled = 1; //Set flow control to 1: XON, 2: RTS/CTS
        self.echo_enabled = 0; //Set echo off, it'll confuse the parser
        self.json_verbosity = 4; //Set JSON verbosity to 5 (max)

        self.emit('open');
    });

    self.serialPort.on("error", function (err) {
        self.emit("error", err);
    });

    self.serialPort.on("close", function (err) {
        self.serialPort = null;
        self.emit("close", err);
    });
};

WCTTG.prototype.close = function () {
    var self = this;
    if (self.serialPort === null)
        return;

    self.serialPort.close();
    // 'close' event will set self.serialPort = null.
};

WCTTG.prototype.write = function (value, callback) {
    var self = this;
    if (self.serialPort === null) {
        return;
    }
    if (typeof value !== "string") {
        console.log("###WRITEjs: ", JSON.stringify(value))
        self.serialPort.write(JSON.stringify(value) + '\n', callback);
    }
    else { // It's a string:
        if (value.match(/[\n\r]$/) === null) {
            value = value + "\n";
        }
        console.log("###WRITE: ", value)
        self.serialPort.write(value, callback);
    }
};

WCTTG.prototype.list = function (callback) {
    SerialPortModule.list(function (err, results) {
        if (err) {
            callback(err, null);
            return;
        }

        var tinygOnlyResults = [];

        for (var i = 0; i < results.length; i++) {
            var item = results[i];
            if (item.pnpId == 'usb-FTDI_FT230X_Basic_UART_DA00FNTN-if00-port0') {
                tinygOnlyResults.push(item);
            }
        }

        callback(null, tinygOnlyResults);
    })
};

module.exports = WCTTG;